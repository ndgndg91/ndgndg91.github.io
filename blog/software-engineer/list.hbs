<!-- Static version of the blog list -->
<div class="mx-auto grid w-full max-w-full grid-cols-1 gap-10 xl:grid-cols-[minmax(0,1fr)_var(--container-2xs)]">
  <div class="px-2 pt-10 pb-24 sm:px-4 xl:pr-0">
    <p
      class="flex items-center gap-2 font-mono text-xs/6 font-medium tracking-widest text-gray-600 uppercase dark:text-gray-400"
      data-section="true">
      Developer Playground
    </p>
    <h1 data-title="true" class="mt-2 text-3xl font-medium tracking-tight text-gray-950 dark:text-white">
      Blog
    </h1>
    <p data-description="true" class="mt-6 text-base/7 text-gray-700 dark:text-gray-400">
      This area is intended for a software engineer audience.
    </p>
    <!-- 검색 창 추가 -->
    <div class="mt-6">
      <label for="blog-search-input" class="sr-only">Search blog posts</label>
      <div class="relative">
        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
          </svg>
        </div>
        <input type="text" id="blog-search-input" placeholder="Search posts by title or description..."
               class="w-full p-3 pl-10 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:placeholder-gray-400"
               aria-label="Search blog posts">
      </div>
    </div>

    <!-- 정적 카드 리스트 컨테이너 -->
    <div id="card-container" class="mt-6 space-y-6">
      <!-- request context holder -->
      <a href="/blog/software-engineer/list/request-context-holder.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/request-context-holder.webp" alt="ETag">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">RequestContextHolder in Spring Boot: Access and Applications</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">RequestContextHolder is a powerful utility class in Spring Framework that provides access to the current HTTP request and response objects through a thread-local storage mechanism.</p>
        </div>
      </a>

      <!-- etag -->
      <a href="/blog/software-engineer/list/etag.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/etag.webp" alt="ETag">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Cache Control & ETags</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Cache Control & ETags: Optimizing Web Performance.</p>
        </div>
      </a>

      <!-- CORS & SOP -->
      <a href="/blog/software-engineer/list/cors-sop.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/cors.webp" alt="CORS and SOP">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">CORS (Cross-Origin Resource Sharing) & SOP (Same-Origin Policy)</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Explore the concepts of CORS and SOP in web development, including how they work together to prevent CSRF attacks and how to implement CORS.</p>
        </div>
      </a>

      <!-- MCP Filesystem -->
      <a href="/blog/software-engineer/list/mcp-filesystem.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/mcp.webp" alt="MCP Filesystem Configuration and Usage">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">MCP Filesystem Configuration and Usage</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Explore how to configure the Model Connector Provider (MCP) filesystem interface and examine real-world use cases in development environments.</p>
        </div>
      </a>

      <!-- r2dbc connection pool -->
      <a href="/blog/software-engineer/list/r2dbc-conn-pool.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/r2dbc-conn-pool.webp" alt="MCP Filesystem Configuration and Usage">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Understanding R2DBC Connection Pool</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">R2DBC connection pooling implements a fundamentally different approach compared to traditional JDBC connection pools like HikariCP, especially in how it handles idle connections and pool initialization.</p>
        </div>
      </a>

      <!-- document db cons-->
      <a href="/blog/software-engineer/list/documentdb-cons.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/documentdb-cons.webp" alt="MCP Filesystem Configuration and Usage">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">AWS DocumentDB Comparison Analysis</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Current Issues with AWS DocumentDB (Instance-Based Cluster) - Does not support zero-downtime deployments during bug fixes, increasing code-level management points</p>
        </div>
      </a>

      <!-- handle floating point      -->
      <a href="/blog/software-engineer/list/handle-floating-point.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/handle-floating-point.webp" alt="Handle Floating Point">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Solving Floating-Point Precision Issues</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">When developing financial applications or systems requiring precise calculations, floating-point precision issues can lead to critical bugs. These problems occur in JVM-based languages like Kotlin, and deciding how to store and process values, especially when interacting with databases, is a crucial design decision.</p>
        </div>
      </a>

      <!-- Kafka Consumer Performance -->
      <a href="/blog/software-engineer/list/kafka-consumer-performance.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/kafka-consumer-performance.webp" alt="Kafka Basics">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Optimizing Kafka Consumer Performance</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Explore effective strategies to optimize Kafka consumer performance including partition-pod 1:1 mapping, concurrent listeners, Confluent Parallel Consumer, and asynchronous processing patterns. Learn implementation techniques, advantages, and trade-offs for each approach to maximize throughput and resource efficiency in your Kafka-based systems.</p>
        </div>
      </a>

      <!-- Kafka Basics -->
      <a href="/blog/software-engineer/list/kafka-basic.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/kafka.webp" alt="Kafka Basics">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Kafka Basics</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Topic, Partition, Offsets, Producer, Consumer, Delivery semantics, Broker, Zookeeper, KRaft concepts.</p>
        </div>
      </a>

      <!-- MongoDB Sharding -->
      <a href="/blog/software-engineer/list/mongo-sharding.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/mongodb-sharding.webp" alt="MongoDB Sharding Cluster with Docker Compose">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">MongoDB Sharding Cluster with Docker Compose</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">What is MongoDB Sharding?.. MongoDB Sharding Architecture.</p>
        </div>
      </a>

      <!-- Kafka Consumer Rate -->
      <a href="/blog/software-engineer/list/kafka-consumer-rate.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/kafka-consumer-rate.webp" alt="Controlling Processing Rate in Kafka Consumers">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Controlling Processing Rate in Kafka Consumers</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">One of the most common challenges when working with message brokers like Kafka is controlling the rate at which messages are processed.</p>
        </div>
      </a>

      <!-- Kafka Consumer Rate -->
      <a href="/blog/software-engineer/list/simple-distributed-id-generation.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/simple-distributed-id-generation.webp" alt="Effective Identifier Generation Strategies in Distributed Environments">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Effective Identifier Generation Strategies in Distributed Environments</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Generating unique identifiers in distributed systems presents significant challenges. While single-server environments can easily rely on auto-increment values or sequences, distributed environments where multiple servers must simultaneously generate IDs require careful consideration to ensure efficiency and avoid duplication.</p>
        </div>
      </a>

      <!-- JVM warmup -->
      <a href="/blog/software-engineer/list/jvm-warmup.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/jvm-warmup.webp" alt="JVM Warmup and Class Loading Process">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">JVM Warmup</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">When a JVM process starts, all required classes are loaded into memory by the class loader through three stages. This process is based on lazy loading.</p>
        </div>
      </a>

      <!-- about ZGC -->
      <a href="/blog/software-engineer/list/about-zgc.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/zgc.webp" alt="Z Garbage Collector (ZGC) Architecture">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">About ZGC</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">ZGC performs high-cost operations concurrently without stopping application threads for more than 10ms. The pause time is independent of heap size, working effectively with heaps ranging from a few hundred megabytes to 16 terabytes.</p>
        </div>
      </a>

      <!-- about G1GC -->
      <a href="/blog/software-engineer/list/about-g1gc.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/g1gc.webp" alt="G1 Garbage Collector Architecture">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">About G1GC</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">G1 GC has been available since Java 7 and was designated as the default garbage collector in Java 9. It is suitable for multi-processor machines with large memory.</p>
        </div>
      </a>

      <!-- replay attack -->
      <a href="/blog/software-engineer/list/replay-attack.html" class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow-sm md:flex-row w-full hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg h-96 md:h-auto md:w-72 md:rounded-none md:rounded-s-lg" src="/img/replay-attack.webp" alt="Network Replay Attack Prevention Diagram">
        <div class="flex flex-col justify-between p-4 leading-normal">
          <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">How to Prevent Replay Attacks</h5>
          <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">A replay attack is a type of network attack where an attacker intercepts valid network data packets and later reuses them. By retransmitting the data, the system processes it as legitimate data. Replay attacks are difficult to detect because they appear as normal requests. Additionally, they can be successful even if the original transmission was encrypted. Replay attacks can overload systems through repetitive requests, potentially disrupting normal system operations.</p>
        </div>
      </a>
      <!-- Add more static blog posts here as needed -->
    </div>
  </div>
  <div class="max-xl:hidden">
    <div class="sticky top-14 max-h-[calc(100svh-3.5rem)] overflow-x-hidden px-6 pt-10 pb-24">
      <div class="flex flex-col gap-3">
        <ins class="kakao_ad_area" style="display:none;"
             data-ad-unit="DAN-2nMLIisQJKH9qMpe"
             data-ad-width="160"
             data-ad-height="600"></ins>
      </div>
    </div>
  </div>
</div>
