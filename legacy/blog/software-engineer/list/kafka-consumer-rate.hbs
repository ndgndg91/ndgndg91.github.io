<div class="mx-auto grid w-full max-w-full grid-cols-1 gap-10 xl:grid-cols-[minmax(0,1fr)_var(--container-2xs)]">
  <div class="px-2 pt-10 pb-24 sm:px-4 xl:pr-0">
    <nav class="mb-4" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2 text-sm text-gray-500">
        <li><a href="/" class="hover:text-gray-700">Home</a></li>
        <li class="flex items-center">
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <a href="/blog/software-engineer/list.html" class="ml-2 hover:text-gray-700">Software Engineer</a>
        </li>
        <li class="flex items-center">
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <span class="ml-2 text-gray-400">Kafka Consumer Rate</span>
        </li>
      </ol>
    </nav>
    <header class="mb-8">
    <p class="flex items-center gap-2 font-mono text-xs/6 font-medium tracking-widest text-gray-600 uppercase dark:text-gray-400" data-section="true">
      Developer Playground
    </p>
    <h1 data-title="true" class="mt-2 text-3xl font-medium tracking-tight text-gray-950 dark:text-white">
      Controlling Processing Rate in Kafka Consumers
    </h1>
      <div class="text-sm text-gray-500 mt-2">Updated: March 31, 2025</div>
    </header>
    <div class="mt-6 prose dark:prose-invert">
      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Introduction</h2>
        <p class="text-gray-700 dark:text-gray-400">
          One of the most common challenges when working with message brokers like Kafka is controlling the rate at which messages are processed.
          Especially when a large volume of messages arrives in a short period, it can lead to system overload or impact downstream services.
          This article explores how to implement rate limiting in Spring Kafka consumers using an internal queue approach.
        </p>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">The Problem</h2>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap">Need to send push notifications to many users simultaneously</li>
          <li class="whitespace-nowrap mobile-wrap">Processing all notifications at once can overwhelm notification services</li>
          <li class="whitespace-nowrap mobile-wrap">Want to control the processing rate (e.g., X notifications per second)</li>
          <li class="whitespace-nowrap mobile-wrap">Need to maintain message ordering and ensure delivery</li>
        </ul>
      </div>

      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 400">
        <!-- Background -->
        <rect width="800" height="400" fill="#f8f9fa" rx="10" ry="10"/>

        <!-- Title -->
        <text x="400" y="40" font-family="Arial" font-size="24" text-anchor="middle" font-weight="bold">Kafka Consumer with Rate Limiting Queue and DLT</text>

        <!-- Kafka Input Topic -->
        <rect x="50" y="100" width="160" height="120" fill="#e6f7ff" stroke="#1890ff" stroke-width="2" rx="5" ry="5"/>
        <text x="130" y="125" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold">Kafka Topic</text>

        <!-- Messages in Kafka -->
        <rect x="70" y="140" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>
        <rect x="110" y="140" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>
        <rect x="150" y="140" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>
        <rect x="70" y="170" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>
        <rect x="110" y="170" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>
        <rect x="150" y="170" width="30" height="20" fill="#1890ff" rx="2" ry="2"/>

        <!-- Consumer -->
        <rect x="280" y="100" width="160" height="120" fill="#fff7e6" stroke="#fa8c16" stroke-width="2" rx="5" ry="5"/>
        <text x="360" y="125" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold">Kafka Consumer</text>
        <text x="360" y="155" font-family="Arial" font-size="14" text-anchor="middle">Reads messages</text>
        <text x="360" y="175" font-family="Arial" font-size="14" text-anchor="middle">from Kafka</text>
        <text x="360" y="195" font-family="Arial" font-size="14" text-anchor="middle">and enqueues</text>

        <!-- Queue -->
        <rect x="510" y="100" width="240" height="120" fill="#f6ffed" stroke="#52c41a" stroke-width="2" rx="5" ry="5"/>
        <text x="630" y="125" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold">ConcurrentLinkedQueue</text>

        <!-- Items in Queue -->
        <rect x="530" y="150" width="30" height="20" fill="#52c41a" rx="2" ry="2"/>
        <rect x="570" y="150" width="30" height="20" fill="#52c41a" rx="2" ry="2"/>
        <rect x="610" y="150" width="30" height="20" fill="#52c41a" rx="2" ry="2"/>
        <rect x="650" y="150" width="30" height="20" fill="#52c41a" rx="2" ry="2"/>
        <rect x="690" y="150" width="30" height="20" fill="#52c41a" rx="2" ry="2"/>

        <!-- Scheduled Task -->
        <rect x="480" y="250" width="300" height="30" fill="#fff2e8" stroke="#fa541c" stroke-width="2" rx="5" ry="5"/>
        <text x="630" y="270" font-family="Arial" font-size="14" text-anchor="middle">Scheduled Task (1/sec): Process N messages</text>

        <!-- Dead Letter Topic -->
        <rect x="240" y="320" width="180" height="60" fill="#fff1f0" stroke="#f5222d" stroke-width="2" rx="5" ry="5"/>
        <text x="330" y="345" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold">Dead Letter Topic</text>
        <text x="330" y="365" font-family="Arial" font-size="12" text-anchor="middle">Failed messages with error info</text>

        <!-- Success and Error boxes - fixed positions to match labels -->
        <rect x="650" y="320" width="100" height="60" fill="#e6f7ff" stroke="#1890ff" stroke-width="2" rx="5" ry="5"/>
        <text x="700" y="345" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold">Success</text>
        <text x="700" y="365" font-family="Arial" font-size="12" text-anchor="middle">Process message</text>

        <rect x="510" y="320" width="100" height="60" fill="#fff1f0" stroke="#f5222d" stroke-width="2" rx="5" ry="5"/>
        <text x="560" y="345" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold">Failure</text>
        <text x="560" y="365" font-family="Arial" font-size="12" text-anchor="middle">Send to DLT</text>

        <!-- Arrows -->
        <!-- Incoming message flow -->
        <path d="M210,160 L280,160" stroke="#1890ff" stroke-width="2" fill="none" marker-end="url(#arrow)"/>
        <path d="M440,160 L510,160" stroke="#fa8c16" stroke-width="2" fill="none" marker-end="url(#arrow)"/>
        <path d="M630,220 L630,250" stroke="#52c41a" stroke-width="2" fill="none" marker-end="url(#arrow)"/>

        <!-- From Scheduled Task to Success/Failure branches -->
        <path d="M700,280 L700,320" stroke="#1890ff" stroke-width="2" fill="none" marker-end="url(#arrow)"/>
        <path d="M560,280 L560,320" stroke="#f5222d" stroke-width="2" fill="none" marker-end="url(#arrow)"/>

        <!-- From Failure to DLT -->
        <path d="M510,350 L420,350" stroke="#f5222d" stroke-width="2" fill="none" marker-end="url(#arrow)"/>

        <!-- Arrow marker definition -->
        <defs>
          <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" fill="#000"/>
          </marker>
        </defs>

        <!-- Labels -->
        <text x="245" y="140" font-family="Arial" font-size="12" text-anchor="middle">1. Consume</text>
        <text x="475" y="140" font-family="Arial" font-size="12" text-anchor="middle">2. Queue</text>
        <text x="670" y="240" font-family="Arial" font-size="12" text-anchor="middle">3. Process</text>
        <text x="740" y="300" font-family="Arial" font-size="12" text-anchor="middle">4a. Success</text>
        <text x="530" y="300" font-family="Arial" font-size="12" text-anchor="middle">4b. Error</text>
        <text x="465" y="340" font-family="Arial" font-size="12" text-anchor="middle" fill="#f5222d">5. Send to DLT</text>
      </svg>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">The Solution</h2>
        <p class="text-gray-700 dark:text-gray-400">
          We'll implement a rate-limited consumer using Spring Kafka with the following approach:
        </p>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap">Use a <code class="inline-code">ConcurrentLinkedQueue</code> as an internal buffer</li>
          <li class="whitespace-nowrap mobile-wrap">Configure a Kafka listener to add messages to the queue</li>
          <li class="whitespace-nowrap mobile-wrap">Create a scheduled task to process messages at a controlled rate</li>
          <li class="whitespace-nowrap mobile-wrap">Make the processing rate configurable via application properties</li>
        </ul>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Implementation</h2>
        <p class="text-gray-700 dark:text-gray-400">
          Let's look at the key parts of the implementation:
        </p>

        <div class="relative bg-gray-900 p-4 rounded-lg">
          <!-- 코드블록 컨테이너 -->
          <div class="overflow-x-auto flex">
            <!-- 코드 블록 -->
        <pre class="whitespace-pre pr-28"><code id="concurrent-linked-queue-internal-buffer" class="language-kotlin text-white">
<span class="text-green-400">@Component</span>
<span class="text-purple-400">class</span> <span class="text-yellow-400">MobilePushRequestConsumer</span>(
    <span class="text-purple-400">private val</span> <span class="text-blue-300">historyService</span>: <span class="text-blue-400">MobilePushHistoryWriteService</span>,
    <span class="text-purple-400">private val</span> <span class="text-blue-300">producer</span>: <span class="text-blue-400">MobilePushProducer</span>
) {
    <span class="text-purple-400">private val</span> <span class="text-blue-300">logger</span> = <span class="text-blue-400">LoggerFactory</span>.<span class="text-yellow-400">getLogger</span>(javaClass)
    <span class="text-purple-400">private val</span> <span class="text-blue-300">queue</span>: <span class="text-blue-400">ConcurrentLinkedQueue</span>&lt;<span class="text-blue-400">MobilePushRequest</span>&gt; = <span class="text-blue-400">ConcurrentLinkedQueue</span>()

    <span class="text-green-400">@Value</span>(<span class="text-green-400">"\${mobile-push.process-per-second}"</span>)
    <span class="text-purple-400">private lateinit var</span> <span class="text-blue-300">processPerSecond</span>: <span class="text-blue-400">String</span>

    <span class="text-green-400">@PostConstruct</span>
    <span class="text-purple-400">private fun</span> <span class="text-yellow-400">setup</span>() {
        <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"plus reward push process per second : {}"</span>, <span class="text-blue-300">processPerSecond</span>)
    }

    <span class="text-green-400">@KafkaListener</span>(
        <span class="text-purple-400">topics</span> = [<span class="text-green-400">MOBILE_PUSH_FROM_OTHER_SERVICE</span>],
        <span class="text-purple-400">containerFactory</span> = <span class="text-green-400">DEFAULT_KAFKA_LISTENER_CONTAINER_FACTORY</span>
    )
    <span class="text-purple-400">fun</span> <span class="text-yellow-400">consumeTargetMobilePushRequest</span>(<span class="text-blue-300">message</span>: <span class="text-blue-400">CloudEvent</span>) {
        <span class="text-purple-400">try</span> {
            <span class="text-gray-400">// Deserialize the message</span>
            <span class="text-purple-400">val</span> <span class="text-blue-300">data</span> = <span class="text-blue-400">CloudEventUtils</span>.<span class="text-yellow-400">mapData</span>(
                <span class="text-blue-300">message</span>,
                <span class="text-blue-400">PojoCloudEventDataMapper</span>.<span class="text-yellow-400">from</span>(<span class="text-yellow-400">jacksonObjectMapper</span>(), <span class="text-blue-400">MobilePushRequest</span>::<span class="text-blue-400">class</span>.java)
            )?.<span class="text-blue-300">value</span>!!

            <span class="text-purple-400">val</span> <span class="text-blue-300">type</span> = <span class="text-blue-400">MobilePushType</span>.<span class="text-yellow-400">fromParamKey</span>(<span class="text-blue-300">data</span>.type)

            <span class="text-gray-400">// For specific message type, add to queue instead of processing immediately</span>
            <span class="text-purple-400">if</span> (<span class="text-blue-300">type</span> == <span class="text-blue-400">MobilePushType</span>.HEAVY) {
                <span class="text-blue-300">queue</span>.<span class="text-yellow-400">add</span>(<span class="text-blue-300">data</span>)
                <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Added to queue: {}"</span>, <span class="text-blue-300">data</span>)
            } <span class="text-purple-400">else</span> {
                <span class="text-gray-400">// Process other types immediately</span>
                <span class="text-gray-400">// ...processing logic omitted...</span>
            }
        } <span class="text-purple-400">catch</span> (<span class="text-blue-300">e</span>: <span class="text-blue-400">Exception</span>) {
            <span class="text-blue-300">logger</span>.<span class="text-yellow-400">error</span>(<span class="text-green-400">"An error occurred while consuming the request"</span>, <span class="text-blue-300">e</span>)
            <span class="text-purple-400">throw</span> <span class="text-blue-300">e</span>
        }
    }

    <span class="text-gray-400">// Scheduled task that runs every second to process messages from the queue</span>
    <span class="text-green-400">@Scheduled</span>(fixedRate = <span class="text-pink-400">1000</span>)
    <span class="text-purple-400">fun</span> <span class="text-yellow-400">processQueue</span>() {
        <span class="text-purple-400">val</span> <span class="text-blue-300">batch</span> = <span class="text-yellow-400">mutableListOf</span>&lt;<span class="text-blue-400">MobilePushRequest</span>&gt;()

        <span class="text-gray-400">// Take only the configured number of messages from the queue</span>
        <span class="text-yellow-400">repeat</span>(<span class="text-blue-300">processPerSecond</span>.<span class="text-yellow-400">toInt</span>()) {
            <span class="text-purple-400">val</span> <span class="text-blue-300">request</span> = <span class="text-blue-300">queue</span>.<span class="text-yellow-400">poll</span>() ?: <span class="text-purple-400">return</span>@repeat
            <span class="text-blue-300">batch</span>.<span class="text-yellow-400">add</span>(<span class="text-blue-300">request</span>)
        }

        <span class="text-purple-400">if</span> (<span class="text-blue-300">batch</span>.isNotEmpty()) {
            <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Processing batch of size: {}"</span>, <span class="text-blue-300">batch</span>.size)
            <span class="text-purple-400">try</span> {
                <span class="text-gray-400">// Process each message in the batch</span>
                <span class="text-blue-300">batch</span>.<span class="text-yellow-400">forEach</span> { <span class="text-blue-300">request</span> ->
                    <span class="text-gray-400">// Processing logic omitted...</span>
                }
                <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Batch processing complete"</span>)
            } <span class="text-purple-400">catch</span> (<span class="text-blue-300">e</span>: <span class="text-blue-400">Exception</span>) {
                <span class="text-blue-300">logger</span>.<span class="text-yellow-400">error</span>(<span class="text-green-400">"Error during batch processing"</span>, <span class="text-blue-300">e</span>)
            }
        }
    }
}
</code></pre>
            <div class="sticky right-2 top-2 bg-gray-50 rounded-lg shadow-md flex-shrink-0 flex items-start h-min">
              <button data-copy-to-clipboard-target="concurrent-linked-queue-internal-buffer"
                      data-copy-to-clipboard-content-type="innerHTML" data-copy-to-clipboard-html-entities="true"
                      class="text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border h-8">

        <span id="default-message">
          <span class="inline-flex items-center">
            <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                 fill="currentColor" viewBox="0 0 18 20">
                        <path
                          d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                    </svg>
            <span class="text-xs font-semibold">Copy code</span>
          </span>
        </span>
                <span id="success-message" class="hidden">
          <span class="inline-flex items-center">
            <svg class="w-3.5 h-3.5 text-blue-500 me-1.5" aria-hidden="true"
                 xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M1 5.917 5.724 10.5 15 1.5"/>
            </svg>
            <span class="text-xs font-semibold text-blue-700 dark:text-blue-500">Copied</span>
          </span>
        </span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Key Components</h2>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap"><strong>ConcurrentLinkedQueue:</strong> A thread-safe queue that serves as our buffer for incoming messages</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Message Type Filtering:</strong> Only specific message types (in this case, reward notifications) are added to the queue</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Scheduled Method:</strong> A method annotated with <code class="inline-code">@Scheduled</code> that runs at a fixed rate (1000ms)</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Configurable Rate:</strong> The number of messages processed per batch is controlled by a configuration property</li>
        </ul>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">How It Works</h2>
        <ol class="max-w-md space-y-1 text-gray-700 list-decimal list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap">The Kafka listener receives messages from the configured topic</li>
          <li class="whitespace-nowrap mobile-wrap">For regular messages, they are processed immediately in the listener</li>
          <li class="whitespace-nowrap mobile-wrap">For reward push notifications (SYSTEM_PLUS_REWARD), messages are added to the queue</li>
          <li class="whitespace-nowrap mobile-wrap">A scheduled task runs every second, taking up to N messages from the queue</li>
          <li class="whitespace-nowrap mobile-wrap">This creates a controlled flow of notifications, limiting to N per second</li>
        </ol>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Configuration</h2>
        <p class="text-gray-700 dark:text-gray-400">
          The processing rate is controlled by a configuration property:
        </p>
        <div class="relative bg-gray-900 p-4 rounded-lg">
          <!-- 코드블록 컨테이너 -->
          <div class="overflow-x-auto flex">
            <!-- 코드 블록 -->
            <pre class="whitespace-pre pr-20 min-w-full"><code id="configuration-rate-yaml" class="language-yaml text-white"><span class="text-gray-400"># application.properties or application.yml</span>
<span class="text-yellow-400">mobile-push</span><span class="text-white">:</span>
  <span class="text-blue-300">process-per-second</span><span class="text-white">:</span> <span class="text-pink-400">50</span>  <span class="text-gray-400"># Process 50 notifications per second</span></code></pre>
            <div class="sticky right-2 top-2 bg-gray-50 rounded-lg shadow-md flex-shrink-0 flex items-start h-min">
              <button data-copy-to-clipboard-target="configuration-rate-yaml"
                      data-copy-to-clipboard-content-type="innerHTML" data-copy-to-clipboard-html-entities="true"
                      class="text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border h-8">

        <span id="default-message">
          <span class="inline-flex items-center">
            <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                 fill="currentColor" viewBox="0 0 18 20">
                        <path
                          d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                    </svg>
            <span class="text-xs font-semibold">Copy code</span>
          </span>
        </span>
                <span id="success-message" class="hidden">
          <span class="inline-flex items-center">
            <svg class="w-3.5 h-3.5 text-blue-500 me-1.5" aria-hidden="true"
                 xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M1 5.917 5.724 10.5 15 1.5"/>
            </svg>
            <span class="text-xs font-semibold text-blue-700 dark:text-blue-500">Copied</span>
          </span>
        </span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Benefits</h2>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap">Throttles message processing to prevent system overload</li>
          <li class="whitespace-nowrap mobile-wrap">Provides backpressure mechanism to handle traffic spikes</li>
          <li class="whitespace-nowrap mobile-wrap">Reduces load on downstream notification services</li>
          <li class="whitespace-nowrap mobile-wrap">Configurable rate without application restart</li>
          <li class="whitespace-nowrap mobile-wrap">No message loss - all messages are eventually processed</li>
        </ul>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Error Handling with Dead Letter Topics</h2>
        <p class="text-gray-700 dark:text-gray-400">
          Proper error handling is crucial in any message processing system. When processing fails, we can use a Dead Letter Topic (DLT) to store messages that couldn't be processed:
        </p>

        <div class="relative bg-gray-900 p-4 rounded-lg">
          <!-- 코드블록 컨테이너 -->
          <div class="overflow-x-auto flex">
            <!-- 코드 블록 -->
            <pre class="whitespace-pre pr-20 min-w-full"><code id="dead-letter-topics" class="language-kotlin text-white"><span class="text-green-400">@Scheduled</span>(fixedRate = <span class="text-pink-400">1000</span>)
<span class="text-purple-400">fun</span> <span class="text-yellow-400">processQueue</span>() {
    <span class="text-purple-400">val</span> <span class="text-blue-300">batch</span> = <span class="text-yellow-400">mutableListOf</span>&lt;<span class="text-blue-400">MobilePushRequest</span>&gt;()
    <span class="text-yellow-400">repeat</span>(<span class="text-blue-300">processPerSecond</span>.<span class="text-yellow-400">toInt</span>()) {
        <span class="text-purple-400">val</span> <span class="text-blue-300">request</span> = <span class="text-blue-300">queue</span>.<span class="text-yellow-400">poll</span>() ?: <span class="text-purple-400">return</span>@repeat
        <span class="text-blue-300">batch</span>.<span class="text-yellow-400">add</span>(<span class="text-blue-300">request</span>)
    }

    <span class="text-purple-400">if</span> (<span class="text-blue-300">batch</span>.isNotEmpty()) {
        <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Processing batch of size: {}"</span>, <span class="text-blue-300">batch</span>.size)
        <span class="text-blue-300">batch</span>.<span class="text-yellow-400">forEach</span> { <span class="text-blue-300">request</span> ->
            <span class="text-purple-400">try</span> {
                <span class="text-gray-400">// ...processing logic omitted...</span>
            } <span class="text-purple-400">catch</span> (<span class="text-blue-300">e</span>: <span class="text-blue-400">Exception</span>) {
                <span class="text-blue-300">logger</span>.<span class="text-yellow-400">error</span>(<span class="text-green-400">"Error processing message: {}"</span>, <span class="text-blue-300">request</span>, <span class="text-blue-300">e</span>)
                <span class="text-gray-400">// Send to Dead Letter Topic</span>
                <span class="text-yellow-400">sendToDLT</span>(<span class="text-blue-300">request</span>, <span class="text-blue-300">e</span>)
            }
        }
        <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Batch processing complete"</span>)
    }
}

<span class="text-purple-400">private fun</span> <span class="text-yellow-400">sendToDLT</span>(<span class="text-blue-300">request</span>: <span class="text-blue-400">MobilePushRequest</span>, <span class="text-blue-300">exception</span>: <span class="text-blue-400">Exception</span>) {
    <span class="text-purple-400">try</span> {
        <span class="text-gray-400">// Create a wrapped message with the original request and error details</span>
        <span class="text-purple-400">val</span> <span class="text-blue-300">dltMessage</span> = <span class="text-blue-400">DeadLetterMessage</span>(
            <span class="text-blue-300">originalMessage</span> = <span class="text-blue-300">request</span>,
            <span class="text-blue-300">exceptionMessage</span> = <span class="text-blue-300">exception</span>.message,
            <span class="text-blue-300">exceptionClass</span> = <span class="text-blue-300">exception</span>.javaClass.name,
            <span class="text-blue-300">timestamp</span> = <span class="text-blue-400">System</span>.<span class="text-yellow-400">currentTimeMillis</span>()
        )

        <span class="text-gray-400">// Send to a dedicated Dead Letter Topic</span>
        <span class="text-blue-300">deadLetterProducer</span>.<span class="text-yellow-400">send</span>(<span class="text-green-400">"mobile-push-dlt"</span>, <span class="text-blue-300">dltMessage</span>)
        <span class="text-blue-300">logger</span>.<span class="text-yellow-400">info</span>(<span class="text-green-400">"Message sent to DLT: {}"</span>, <span class="text-blue-300">request</span>)
    } <span class="text-purple-400">catch</span> (<span class="text-blue-300">e</span>: <span class="text-blue-400">Exception</span>) {
        <span class="text-blue-300">logger</span>.<span class="text-yellow-400">error</span>(<span class="text-green-400">"Failed to send message to DLT: {}"</span>, <span class="text-blue-300">request</span>, <span class="text-blue-300">e</span>)
    }
}</code></pre>
            <div class="sticky right-2 top-2 bg-gray-50 rounded-lg shadow-md flex-shrink-0 flex items-start h-min">
              <button data-copy-to-clipboard-target="dead-letter-topics"
                      data-copy-to-clipboard-content-type="innerHTML" data-copy-to-clipboard-html-entities="true"
                      class="text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border h-8">

        <span id="default-message">
          <span class="inline-flex items-center">
            <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                 fill="currentColor" viewBox="0 0 18 20">
                        <path
                          d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                    </svg>
            <span class="text-xs font-semibold">Copy code</span>
          </span>
        </span>
                <span id="success-message" class="hidden">
          <span class="inline-flex items-center">
            <svg class="w-3.5 h-3.5 text-blue-500 me-1.5" aria-hidden="true"
                 xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M1 5.917 5.724 10.5 15 1.5"/>
            </svg>
            <span class="text-xs font-semibold text-blue-700 dark:text-blue-500">Copied</span>
          </span>
        </span>
              </button>
            </div>
          </div>
        </div>

        <p class="text-gray-700 dark:text-gray-400 mt-4">
          With this approach, messages that fail processing are:
        </p>
        <ol class="max-w-md space-y-1 text-gray-700 list-decimal list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap">Logged with detailed error information</li>
          <li class="whitespace-nowrap mobile-wrap">Wrapped with additional metadata about the failure</li>
          <li class="whitespace-nowrap mobile-wrap">Sent to a dedicated Dead Letter Topic for later analysis or retry</li>
        </ol>
        <p class="text-gray-700 dark:text-gray-400 mt-4">
          You can also implement a separate consumer for the DLT that could attempt to reprocess messages after a delay or alert operations staff about persistent failures.
        </p>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Considerations</h2>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap"><strong>Memory Usage:</strong> The queue uses memory, so consider the potential queue size during traffic spikes</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Application Restart:</strong> Queue contents are lost on application restart - consider persistent queues for critical notifications</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Monitoring:</strong> Implement monitoring for queue size to detect potential backlog issues</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Error Handling:</strong> Implement robust error handling to prevent queue processing from stopping</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Scaling:</strong> In clustered environments, each instance will have its own queue and rate limit</li>
        </ul>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Alternative Approaches</h2>
        <ul class="max-w-md space-y-1 text-gray-700 list-disc list-inside dark:text-gray-400">
          <li class="whitespace-nowrap mobile-wrap"><strong>Kafka Consumer Pause/Resume:</strong> Temporarily pause consumption when processing is backed up</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>External Rate Limiters:</strong> Use libraries like Resilience4j or Bucket4j</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Distributed Rate Limiting:</strong> Use Redis-based rate limiters for clustered environments</li>
          <li class="whitespace-nowrap mobile-wrap"><strong>Kafka Streams:</strong> For more complex throttling requirements</li>
        </ul>
      </div>

      <div class="mt-6">
        <h2 class="inline-block mb-2 text-3xl tracking-tight text-gray-900 dark:text-white">Conclusion</h2>
        <p class="text-gray-700 dark:text-gray-400">
          Implementing rate limiting for Kafka consumers using an internal queue is a simple yet effective approach for controlling message processing rates. This pattern is particularly useful for high-volume notification systems where controlling the throughput is essential for system stability and downstream service protection.
        </p>
        <p class="text-gray-700 dark:text-gray-400 mt-2">
          The implementation shown here provides a configurable, stable way to handle varying loads while ensuring all messages are eventually processed. For production systems, consider the additional factors mentioned in the considerations section to ensure reliability and robustness.
        </p>
      </div>
    </div>
  </div>
  <div class="max-xl:hidden">
    <div class="sticky top-14 max-h-[calc(100svh-3.5rem)] overflow-x-hidden px-6 pt-10 pb-24">
      <div class="flex flex-col gap-3">
        <ins class="kakao_ad_area" style="display:none;"
             data-ad-unit="DAN-2nMLIisQJKH9qMpe"
             data-ad-width="160"
             data-ad-height="600"></ins>
      </div>
    </div>
  </div>
</div>
