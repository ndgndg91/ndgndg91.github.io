import React from 'react';
import useUuid from '../../../hooks/useUuid';
import SEOHead from '../../SEOHead';
import { seoData } from '../../../data/seoData';
import AdSection from '../../ads/AdSection';

const UuidGenerator: React.FC = () => {
  const {
    // States
    uuidV1,
    uuidV3,
    uuidV4,
    uuidV5,
    uuidV7,
    v3Namespace,
    v3Name,
    v5Namespace,
    v5Name,
    error,
    
    // Setters
    setV3Namespace,
    setV3Name,
    setV5Namespace,
    setV5Name,
    
    // Generators
    generateV1,
    generateV3,
    generateV4,
    generateV5,
    generateV7,
    
    // Utils
    copyToClipboard
  } = useUuid();

  return (
    <>
      <SEOHead {...seoData.uuid} />
      <div className="px-2 pt-10 pb-24 sm:px-4 xl:pr-0">
        <p className="flex items-center gap-2 font-mono text-xs/6 font-medium tracking-widest text-gray-600 uppercase dark:text-gray-400"
           data-section="true">
          Developer Playground
        </p>
      <h1 data-title="true" className="mt-2 text-3xl font-medium tracking-tight text-gray-950 dark:text-white">
        UUID Generator
      </h1>
      <p data-description="true" className="mt-6 text-base/7 text-gray-700 dark:text-gray-400">
        A UUID (Universally Unique Identifier) is used to generate a unique identifier. Each version has a different
        generation method and purpose.
      </p>
      <br/>
      
      {/* UUID v4 (Random) */}
      <div className="max-w-screen p-6 mb-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
        <h2 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          UUID v4 (Random-based)
        </h2>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
          Completely randomly generated and widely used. The possibility of collision is extremely low.
        </p>
        <button 
          onClick={generateV4}
          className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-500/20 dark:shadow-purple-900/30 transform hover:-translate-y-0.5 mb-4"
        >
          Generate UUID v4
        </button>
        <div className="flex items-center gap-2">
          <span className="font-medium text-gray-900 dark:text-white">Result:</span>
          <code className="flex-1 p-2 bg-gray-100 text-gray-900 font-mono dark:bg-gray-700 dark:text-gray-100 rounded break-all">
            {uuidV4 || 'Click the button to generate a UUID v4'}
          </code>
          <button 
            onClick={() => copyToClipboard(uuidV4)}
            disabled={!uuidV4}
            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Copy
          </button>
        </div>
      </div>

      {/* UUID v7 (Time-ordered) */}
      <div className="max-w-screen p-6 mb-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
        <h2 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          UUID v7 (Sortable by Time)
        </h2>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
          Generated by combining a Unix timestamp with a random value. It is sortable by time and advantageous for
          database indexing.
        </p>
        <button 
          onClick={generateV7}
          className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-500/20 dark:shadow-purple-900/30 transform hover:-translate-y-0.5 mb-4"
        >
          Generate UUID v7
        </button>
        <div className="flex items-center gap-2">
          <span className="font-medium text-gray-900 dark:text-white">Result:</span>
          <code className="flex-1 p-2 bg-gray-100 text-gray-900 font-mono dark:bg-gray-700 dark:text-gray-100 rounded break-all">
            {uuidV7 || 'Click the button to generate a UUID v7'}
          </code>
          <button 
            onClick={() => copyToClipboard(uuidV7)}
            disabled={!uuidV7}
            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Copy
          </button>
        </div>
      </div>

      {/* UUID v1 (Time-based) */}
      <div className="max-w-screen p-6 mb-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
        <h2 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          UUID v1 (Time-based)
        </h2>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
          Generated based on the current time and MAC address. It is unique but may expose time information.
        </p>
        <button 
          onClick={generateV1}
          className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-500/20 dark:shadow-purple-900/30 transform hover:-translate-y-0.5 mb-4"
        >
          Generate UUID v1
        </button>
        <div className="flex items-center gap-2">
          <span className="font-medium text-gray-900 dark:text-white">Result:</span>
          <code className="flex-1 p-2 bg-gray-100 text-gray-900 font-mono dark:bg-gray-700 dark:text-gray-100 rounded break-all">
            {uuidV1 || 'Click the button to generate a UUID v1'}
          </code>
          <button 
            onClick={() => copyToClipboard(uuidV1)}
            disabled={!uuidV1}
            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Copy
          </button>
        </div>
      </div>

      {/* UUID v5 (Name-based, SHA-1) */}
      <div className="max-w-screen p-6 mb-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
        <h2 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          UUID v5 (Name-based, SHA-1)
        </h2>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
          Generated by converting a namespace and name string into an SHA-1 hash. It is more secure than v3.
        </p>
        
        <div className="mb-4">
          <label htmlFor="v5-namespace" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            Namespace:
          </label>
          <input
            type="text"
            id="v5-namespace"
            value={v5Namespace}
            onChange={(e) => setV5Namespace(e.target.value)}
            placeholder="e.g., 6ba7b810-9dad-11d1-80b4-00c04fd430c8"
            className="w-full p-2 text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
        </div>
        
        <div className="mb-4">
          <label htmlFor="v5-name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            Name:
          </label>
          <input
            type="text"
            id="v5-name"
            value={v5Name}
            onChange={(e) => setV5Name(e.target.value)}
            placeholder="e.g., my-unique-name"
            className="w-full p-2 text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
        </div>
        
        <button 
          onClick={generateV5}
          className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-500/20 dark:shadow-purple-900/30 transform hover:-translate-y-0.5 mb-4"
        >
          Generate UUID v5
        </button>
        
        <div className="flex items-center gap-2">
          <span className="font-medium text-gray-900 dark:text-white">Result:</span>
          <code className="flex-1 p-2 bg-gray-100 text-gray-900 font-mono dark:bg-gray-700 dark:text-gray-100 rounded break-all">
            {uuidV5 || 'Enter namespace and name, then click the button'}
          </code>
          <button 
            onClick={() => copyToClipboard(uuidV5)}
            disabled={!uuidV5}
            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Copy
          </button>
        </div>
      </div>

      {/* UUID v3 (Name-based, MD5) */}
      <div className="max-w-screen p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
        <h2 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          UUID v3 (Name-based, MD5)
        </h2>
        <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
          Generated by converting a namespace and name string into an MD5 hash. Less secure than v5 but faster.
        </p>
        
        <div className="mb-4">
          <label htmlFor="v3-namespace" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            Namespace:
          </label>
          <input
            type="text"
            id="v3-namespace"
            value={v3Namespace}
            onChange={(e) => setV3Namespace(e.target.value)}
            placeholder="e.g., 6ba7b810-9dad-11d1-80b4-00c04fd430c8"
            className="w-full p-2 text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
        </div>
        
        <div className="mb-4">
          <label htmlFor="v3-name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            Name:
          </label>
          <input
            type="text"
            id="v3-name"
            value={v3Name}
            onChange={(e) => setV3Name(e.target.value)}
            placeholder="e.g., my-unique-name"
            className="w-full p-2 text-sm text-gray-900 bg-white rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
        </div>
        
        <button 
          onClick={generateV3}
          className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-500/20 dark:shadow-purple-900/30 transform hover:-translate-y-0.5 mb-4"
        >
          Generate UUID v3
        </button>
        
        <div className="flex items-center gap-2">
          <span className="font-medium text-gray-900 dark:text-white">Result:</span>
          <code className="flex-1 p-2 bg-gray-100 text-gray-900 font-mono dark:bg-gray-700 dark:text-gray-100 rounded break-all">
            {uuidV3 || 'Enter namespace and name, then click the button'}
          </code>
          <button 
            onClick={() => copyToClipboard(uuidV3)}
            disabled={!uuidV3}
            className="px-4 py-2 bg-sky-500 text-white font-semibold rounded-lg hover:bg-sky-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Copy
          </button>
        </div>
      </div>
      
      {/* Error display */}
      {error && (
        <div className="mt-4 p-4 text-red-700 bg-red-100 rounded-lg dark:bg-red-900 dark:text-red-200">
          {error}
        </div>
      )}
      
      {/* Bottom Ad */}
      <AdSection 
        position="bottom" 
        size="rectangle" 
        showAd={true}
        className="mt-8"
      />
      </div>
    </>
  );
};

export default UuidGenerator;
